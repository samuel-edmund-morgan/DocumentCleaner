#!/bin/bash
DUMP_DIR="/home/$USER/.docsclean_dump.d"
mkdir -p $DUMP_DIR
LOG_FILE="/home/$USER/docsclean.log"
#added v1.1
CLEANED_LOG="/home/$USER/docsclean_cleaned.log"
touch /home/$USER/docsclean_cleaned.log

touch /home/$USER/docsclean.log
IFS=$'\n'

rm -rf /tmp/detailed_report
cat <<EOF > /tmp/AGREEMENT
DocumentCleaner
Версія 1.1, Грудень 2022

	Застосунок DocumentCleaner розроблений спеціально для потреб Академії з ліквідації наслідків кіберінцидентів спровокованих зараженнями електронних документів форматів doc, docx, rtf, а також для автоматичного видалення ярликів (lnk).
	В даній версії реалізована автоматична чистка документів за обраним шляхом розташування.
Застосунок може сканувати документи, окрім тих, які знаходяться в архівах (zip, rar, tar.gz, 7z і т.д).

	Початкові версії застосунку роблять резервну копію ваших документів (docx, rtf та doc). Даний функціонал запроваджений ТІЛЬКИ на етап тестування, до моменту впровадження максимально стабільної роботи, окрім того, рекомендується перед використанням додатково зробити резервну копію власних документів які плануєте чистити.

	За обраним шляхом сканування буде:

	1) Видалено ВСІ ярлики (lnk).

	2) Документи формату docx будуть перезібрані з видаленням посилань на шаблони, а також активних посилань у документі (посилання залишаться, проте, будуть неактивні).

	3) Документи формату rtf втратять ВСІ наявні посилання у своєму складі.

	4) Документи формату doc будуть перезібрані у шістнадцяткову систему числення, знайдені та видалені ВСІ посилання та перезібрані назад у doc.

	Зсуви форматувань у документах docx, rtf, doc - НЕ спостерігались. Про всі виявлені зсуви формату після використання програми повідомляти у ВІТ.

	Програма розроблена у 3 версіях:

	1) docsgui - графічна версія програми. Розроблена і протестована на операційній системі Ubuntu 22.04. 
	Залежності: Операційна система на базі ядра Linux, gnome, coreutils або busybox, udev, xdd, udisks2, zip, unzip, українські локалі.

	2) docscli  - версія для використання у командному рядку. Розроблена і протестована на операційній системі Ubuntu 22.04. 
	Залежності: Операційна система на базі ядра Linux, coreutils або busybox, udev, xdd, udisks2, zip, unzip, українські локалі.

	3) docskiosk - версія для запуску у режимі кіоску. Застосунок запускається у системі та постійно очікує на флеш носій. Все що необхідно користувачу - це вставити флеш носій в USB порт та дочекатись повідомлення про дозвіл виймати флеш носій. Зазначена версія програми розроблена для роботи з флеш носіями. Використовувати з застосунком флеш носій, який заповнений більше ніж на 95% НЕ рекомендується.
Залежності: Операційна система на базі ядра Linux, coreutils або busybox, udev, xdd, udisks2, zip, unzip, українські локалі.

	Всі дії застосунку записуються(логуються) для оформлення звітів про виконану роботу.
Початкові версії застосунку роблять

	УВАГА! Застосунок працює в тестовому режимі. Розробник НЕ несе відповідальності за цілісність Ваших документів. Використовуйте на свій страх та ризик. Методи заражень та реалізації кіберзагроз щодня змінюються, тому гарантувати 100% кіберзахист, так само як і правильну роботу даного застосунку - неможливо.
	Відгуки про роботу застосунку, скарги та побажання, поради для розширення функціоналу направляйте у ВІТ.
	Історія версій:
	1.1 - Доданий файл запуску політик Windows у корінь флеш носія
	      Доданий окремий файл журналу для документів, в яких було знайдено підозріле посилання
	      
	1.0 - Перша версія програми
EOF



zenity --text-info \
       --title="DocumentCleaner: Умови використання" \
        --ok-label  "Обрати шлях для сканування"  \
        --cancel-label "Відмовляюсь" \
        --width 800 \
       --height 800 \
        --filename=/tmp/AGREEMENT \
       --checkbox="Я прочитав(ла) і погоджуюсь з умовами використання."

RESULT="$?"
if [[ "$RESULT" -eq 0 ]]; then
	rm -rf /tmp/AGREEMENT
        WORK_PATH=$(zenity --file-selection --title "Оберіть шлях для сканування" --filename "/home/${USER}/" --directory)
        	if [[ "$WORK_PATH" == "" ]]; then
   		zenity --error \
       			--title "Помилка!" \
       			--width 500 \
       			--height 300 \
       			--text "Шлях не обрано!"
		exit 0
		fi
else
	rm -rf /tmp/AGREEMENT
        exit 0
fi

find $WORK_PATH -type f -iname "*.docx" > /tmp/docxArray
find $WORK_PATH -type f -iname "*.doc" > /tmp/docArray
find $WORK_PATH -type f -iname "*.rtf" > /tmp/rtfArray
find $WORK_PATH -iname "*.lnk"  > /tmp/linkArray

link_count=$(wc -l < /tmp/linkArray)
docx_count=$(wc -l < /tmp/docxArray)
doc_count=$(wc -l < /tmp/docArray)
rtf_count=$(wc -l < /tmp/rtfArray)
sum=$((link_count +docx_count + doc_count + rtf_count))
one_percent=$(echo 100 $sum | awk '{print $1 / $2}')
percent_counter=0
danger_link_count=0
danger_docx_count=0
danger_doc_count=0
danger_rtf_count=0

IFS=$'\n'
docx_array=( $(grep -v -e "001.Original_Documents" -e "\/\."  /tmp/docxArray) )
doc_array=( $(grep -v -e "001.Original_Documents" -e "\/\."  /tmp/docArray) )
rtf_array=( $(grep -v -e "001.Original_Documents" -e "\/\."  /tmp/rtfArray) )
link_array=( $(grep -v -e "001.Original_Documents"  -e "\/\."  /tmp/linkArray) )
#readarray -t link_array < /tmp/linkArray

rm -rf /tmp/docxArray
rm -rf /tmp/docArray
rm -rf /tmp/rtfArray
rm -rf /tmp/linkArray


if [ ! "${#docx_array[@]}" -gt 0 ] && [ ! "${#rtf_array[@]}" -gt 0 ] && [ ! "${#doc_array[@]}" -gt 0 ] && [ ! "${#link_array[@]}" -gt 0 ] ; then
	zenity --info \
       --title "Повідомлення про результат" \
       --width 500 \
       --height 300 \
       --text "Документи та шкідливі ярлики за шляхом $WORK_PATH не знайдено!"
        exit 0
fi



(
echo "# Очищення ярликів..."
printf "\nЗнайдені ярлики:\n" >> /tmp/detailed_report
find $WORK_PATH -iname "*.lnk" -delete
if [ "${#link_array[@]}" -gt 0 ]; then
	for (( i=0; i<${#link_array[@]}; i++ ))
        do
        	danger_link_count=$((danger_link_count + 1))
        	echo "${link_array[i]}" >> /tmp/detailed_report
        	percent_counter=$(echo $percent_counter $one_percent | awk '{print $1 + $2}')
        	echo "$percent_counter"
                echo "[$(date +"%T - %d.%m.%y")] : Ярлик ${link_array[i]} успішно видалено!" >> "$LOG_FILE"
                #added v1.1
                echo "[$(date +"%T - %d.%m.%y")] : Ярлик ${link_array[i]} успішно видалено!" >> "$CLEANED_LOG"
        done
else
       echo "[$(date +"%T - %d.%m.%y")] : Шкідливих ярликів не виявлено!" >> "$LOG_FILE"
fi



regex='Target[[:space:]]*=[[:space:]]*[(\")|('"'"')|(\`)](https?|ftp|file):\/\/[-[:alnum:]\+&@#\/%?=~_|.;]*[-[:alnum:]\+&@#\/%=~_|][(\")|('"'"')|(\`)]'
replace_with='Target=\"\"'
echo "# Очищення docx..."
printf "\nЗнайдені docx:\n" >> /tmp/detailed_report
if [ "${#docx_array[@]}" -gt 0 ]; then
	for (( i=0; i<${#docx_array[@]}; i++ ))
	do
   		document_fullpath="${docx_array[i]}"
		document_name=$(echo $document_fullpath | sed -e "s/ /_/g" | rev | cut -d/ -f1 | rev)	
		document_path=$(dirname "${document_fullpath}")
		document_path=$(echo "$document_path" | cut -d'/' -f4-)
		percent_counter=$(echo $percent_counter $one_percent | awk '{print $1 + $2}')
		#May be broken if names with +255 chars!!
   		mkdir -p $DUMP_DIR/$document_path
   		mkdir -p $DUMP_DIR/$document_path/001.Original_Documents/
   		rnd_path=$(mktemp -d "$DUMP_DIR/$document_path/$document_name".XXXXXX)
		unzip -q $document_fullpath -d $rnd_path
		mv $document_fullpath $DUMP_DIR/$document_path/001.Original_Documents/$document_name
		echo "$percent_counter"
		
		#added 1.2
		if [[ -f "$regex $rnd_path/word/_rels/settings.xml.rels" ]]; then
                	if [[ $(egrep  -orl $regex $rnd_path/word/_rels/settings.xml.rels) ]]; then
                		((danger_docx_count++))
                		echo "${docx_array[i]}" >> /tmp/detailed_report
                        	egrep  -orlZ $regex $rnd_path/word/_rels/settings.xml.rels | xargs -0 sed -i -E "s/$regex/$replace_with/g"
				(cd $rnd_path && zip -q -r ../$document_name .)
				cp $DUMP_DIR/$document_path/$document_name $document_fullpath
				echo "[$(date +"%T - %d.%m.%y")] : Чистка файлу ${docx_array[i]} завершена!" >> "$LOG_FILE"
				#added v1.1
				echo "[$(date +"%T - %d.%m.%y")] : Чистка файлу ${docx_array[i]} завершена!" >> "$CLEANED_LOG"
			else
				cp $DUMP_DIR/$document_path/001.Original_Documents/$document_name $DUMP_DIR/$document_path/$document_name
				cp $DUMP_DIR/$document_path/$document_name $document_fullpath
                        	echo "[$(date +"%T - %d.%m.%y")] : Файл ${docx_array[i]} чистий!" >> "$LOG_FILE"
			fi
			
                else
			cp $DUMP_DIR/$document_path/001.Original_Documents/$document_name $DUMP_DIR/$document_path/$document_name
			cp $DUMP_DIR/$document_path/$document_name $document_fullpath
                        echo "[$(date +"%T - %d.%m.%y")] : Файл ${docx_array[i]} чистий!" >> "$LOG_FILE"
                fi  
   		rm -rf $rnd_path
	done
fi


regex='(https?|ftp|file):\/\/[-[:alnum:]\+&@#\/%?=~_|.;]*[-[:alnum:]\+&@#\/%=~_|]'
replace_with='DELETED_LINK'
echo "# Очищення rtf..."
printf "\nЗнайдені rtf:\n" >> /tmp/detailed_report
if [ "${#rtf_array[@]}" -gt 0 ]; then
        for (( i=0; i<${#rtf_array[@]}; i++ ))
        do
                document_fullpath="${rtf_array[i]}"
                document_name=$(echo $document_fullpath | sed -e "s/ /_/g" | rev | cut -d/ -f1 | rev)
		document_path=$(dirname "${document_fullpath}")
		document_path=$(echo "$document_path" | cut -d'/' -f4-)
		percent_counter=$(echo $percent_counter $one_percent | awk '{print $1 + $2}')
		#May be broken if names with +255 chars!!
                mkdir -p $DUMP_DIR/$document_path
                mkdir -p $DUMP_DIR/$document_path/001.Original_Documents/
                cp $document_fullpath $DUMP_DIR/$document_path/$document_name 
                mv $document_fullpath $DUMP_DIR/$document_path/001.Original_Documents/$document_name
                echo "$percent_counter"
		if [[ $(egrep  -orl $regex $DUMP_DIR/$document_path/$document_name) ]]; then
			((danger_rtf_count++))
			echo "${rtf_array[i]}" >> /tmp/detailed_report
			egrep  -orlZ $regex $DUMP_DIR/$document_path/$document_name | xargs -0 sed -i -E "s/$regex/$replace_with/g"
			cp $DUMP_DIR/$document_path/$document_name $document_fullpath
			echo "[$(date +"%T - %d.%m.%y")] : Чистка файлу ${rtf_array[i]} завершена!" >> "$LOG_FILE"
			#added v1.1
			echo "[$(date +"%T - %d.%m.%y")] : Чистка файлу ${rtf_array[i]} завершена!" >> "$CLEANED_LOG"
		else
			cp $DUMP_DIR/$document_path/001.Original_Documents/$document_name $DUMP_DIR/$document_path/$document_name
			cp $DUMP_DIR/$document_path/$document_name $document_fullpath
                        echo "[$(date +"%T - %d.%m.%y")] : Файл ${rtf_array[i]} чистий!" >> "$LOG_FILE"
		fi
        done
fi


regex='(([0-9A-Fa-f][0-9A-CE-Fa-ce-f])|([0-2A-F4-9a-f][0-9A-Fa-f]))([0-13-9]{2})(68|48)([0-9A-Fa-f]{2})?((74|54)([0-9A-Fa-f]{2})?){2}(70|50)([0-9A-Fa-f]{2})?((73|53)([0-9A-Fa-f]{2})?)?(3a|3A)([0-9A-Fa-f]{2})?((2f|2F)([0-9A-Fa-f]{2})?){2}(([0-9A-Fa-f][0-9A-DFa-df])|([0-1A-F3-9a-f][0-9A-Fa-f]))*'
replace_with='DELETED_LINK'
echo "# Очищення doc..."
printf "\nЗнайдені doc:\n" >> /tmp/detailed_report
if [ "${#doc_array[@]}" -gt 0 ]; then
        for (( i=0; i<${#doc_array[@]}; i++ ))
        do
		document_fullpath="${doc_array[i]}"
                document_name=$(echo $document_fullpath | sed -e "s/ /_/g" | rev | cut -d/ -f1 | rev)
                document_path=$(dirname "${document_fullpath}")
                document_path=$(echo "$document_path" | cut -d'/' -f4-)
                percent_counter=$(echo $percent_counter $one_percent | awk '{print $1 + $2}')
                echo "$percent_counter"
                #May be broken if names with +255 chars!!
                mkdir -p $DUMP_DIR/$document_path/
                mkdir -p $DUMP_DIR/$document_path/001.Original_Documents/
		mkdir -p $DUMP_DIR/$document_path/tmpconvert/
		cp $document_fullpath $DUMP_DIR/$document_path/$document_name
		mv $document_fullpath $DUMP_DIR/$document_path/001.Original_Documents/$document_name
		xxd -p -c 0 "$DUMP_DIR/$document_path/$document_name" | tr -d \\n > "$DUMP_DIR/$document_path/tmpconvert/$document_name"
			if [[ $(egrep  -or -m 1 $regex $DUMP_DIR/$document_path/tmpconvert/$document_name) ]]; then
				((danger_doc_count++))
				echo "${doc_array[i]}" >> /tmp/detailed_report
				while [[ $(egrep  -or -m 1 $regex $DUMP_DIR/$document_path/tmpconvert/$document_name) ]]; do
					replace_with="$(egrep -or -m 1 $regex $DUMP_DIR/$document_path/tmpconvert/$document_name | head -1 | sed 's/./0/g')"
					egrep  -orlZ $regex $DUMP_DIR/$document_path/tmpconvert/$document_name | xargs -0 sed -i  -E "s/$regex/$replace_with/1"
				done
				xxd -r -p  $DUMP_DIR/$document_path/tmpconvert/$document_name > $DUMP_DIR/$document_path/$document_name
				cp $DUMP_DIR/$document_path/$document_name $document_fullpath
                                echo "[$(date +"%T - %d.%m.%y")] : Чистка файлу ${doc_array[i]} завершена!" >> "$LOG_FILE"
                                #added v1.1
                                echo "[$(date +"%T - %d.%m.%y")] : Чистка файлу ${doc_array[i]} завершена!" >> "$CLEANED_LOG"
			else
				cp $DUMP_DIR/$document_path/001.Original_Documents/$document_name $DUMP_DIR/$document_path/$document_name
				cp $DUMP_DIR/$document_path/$document_name $document_fullpath
                                echo "[$(date +"%T - %d.%m.%y")] : Файл ${doc_array[i]} чистий!" >> "$LOG_FILE"
                        fi
			rm -rf $DUMP_DIR/$document_path/tmpconvert/
			printf "___________________________________________________________________________________________________________________________________________________________\n"
	done
fi
echo "# Сканування і очищення закінчене..."
echo "$danger_link_count" >> /tmp/malwareCounter
echo "$danger_docx_count" >> /tmp/malwareCounter
echo "$danger_doc_count" >> /tmp/malwareCounter
echo "$danger_rtf_count" >> /tmp/malwareCounter
) | zenity --progress \
         --width 500 \
         --height 300 \
         --title="Очищення документів" \
         --text="Початок сканування..." \
          --percentage=0
if [ "$?" = -1 ] ; then
        zenity --error \
          --text="Помилка сканування!"
        exit 0
fi
danger_link_count=$(sed '1q;d' /tmp/malwareCounter)
danger_docx_count=$(sed '2q;d' /tmp/malwareCounter)
danger_doc_count=$(sed '3q;d' /tmp/malwareCounter)
danger_rtf_count=$(sed '4q;d' /tmp/malwareCounter)
rm -rf /tmp/malwareCounter

ret_answer=1
while [ $ret_answer -eq 1 ]; do
answer=$(zenity --warning \
       --title "Увага! Знайдені та знешкоджені заражені документи" \
       --width 500 \
       --height 300 \
       --extra-button "Деталі" \
       --ok-label  "Окей"  \
       --text "За вказаним шляхом пошуку $WORK_PATH було знайдено: \n - Ярликів: $danger_link_count \n - Документів docx: $danger_docx_count \n - Документів rtf: $danger_rtf_count \n - Документів doc: $danger_doc_count \n"
 )
ret_answer=$?
if [[ $answer = "Деталі" ]]
then
zenity --text-info \
       --title="Детальний огляд" \
        --ok-label  "Вихід"  \
        --cancel-label "Назад" \
        --width 800 \
       --height 800 \
        --filename=/tmp/detailed_report
        
        DETAILED_ANSWER="$?"
	if [[ "$DETAILED_ANSWER" -eq 0 ]]; then
		exit 0
	fi

fi
done
rm -rf /tmp/detailed_report
        
         
       
       
